# .env.example
# Copy this file to `.env` and adjust values as needed.

# =========================================================
# üß© PROJECT IDENTIFIER
# =========================================================
# Used by Docker Compose to prefix container names.
# Ensures isolated containers per project (e.g. readability-analyser-backend).
COMPOSE_PROJECT_NAME=your-project-name

# =========================================================
# ‚öôÔ∏è NOTES
# =========================================================
# - When running with the `prod` profile, Supabase variables
#   are ignored (so it's fine if they are left blank).
#
# - Docker Compose may warn:
#     "The 'SUPABASE_JDBC_URL' variable is not set. Defaulting to a blank string."
#   This has no effect unless SPRING_PROFILES_ACTIVE=supabase.
#
# - If you prefer a clean build with no warnings, simply add:
#     SUPABASE_JDBC_URL=""
#     SUPABASE_USERNAME=""
#     SUPABASE_PASSWORD=""
#
# - Example:
#     docker compose up --build backend
#   ‚Üí will build and run only the backend container, perfect for testing Supabase.
#
# - If port 8080 is already in use:
#     Error: "Bind for 0.0.0.0:8080 failed"
#   ‚Üí Stop any existing containers first:
#     docker ps
#     docker stop <container_id>
#     docker compose down -v

# =========================
# üå± ACTIVE SPRING PROFILE
# =========================
# Which Spring Boot environment profile should run.
# Options:
#   - dev       ‚Üí Local H2 database (default)
#   - supabase  ‚Üí Hosted PostgreSQL (Supabase)
#   - prod      ‚Üí Docker PostgreSQL (for deployments)
SPRING_PROFILES_ACTIVE=dev


# =========================
# üß± LOCAL DEV (Default)
# =========================
# Uses file-based H2 database: ./data/devdb
# No external dependencies or passwords needed.


# =========================
# üü¢ SUPABASE (Optional Cloud DB)
# =========================
# Each Supabase project has its own credentials and host.
# To connect Spring Boot, use the Transaction Pooler (port 6543).
#
# How to get your connection info:
#   1. Go to: Supabase Dashboard ‚Üí Project Settings ‚Üí Database ‚Üí Connection Info
#   2. Copy the Pooler credentials.
#   3. Build your JDBC URL as:
#        jdbc:postgresql://<HOST>:<PORT>/<DATABASE>?sslmode=require
#
# Example format:
#   Host: aws-1-eu-west-1.pooler.supabase.com
#   Port: 6543
#   Database: postgres
#   User: postgres.xxxxxxxx
#   Password: your_supabase_password
#
# Example connection:
SUPABASE_JDBC_URL=jdbc:postgresql://aws-1-eu-west-1.pooler.supabase.com:6543/postgres?sslmode=require
SUPABASE_USERNAME=your_supabase_username
SUPABASE_PASSWORD=your_supabase_password


# =========================
# üê≥ PROD (Docker PostgreSQL)
# =========================
# Used when running `docker compose up`.
# These defaults match your docker-compose.yml configuration.
POSTGRES_USER=admin
POSTGRES_PASSWORD=password
POSTGRES_DB=appdb